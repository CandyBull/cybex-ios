type AccountAddressRecord {
  accountName: String!
  address: String!
  type: String
  asset: String!
  jadeOrders: [String]!
  latest: Boolean!
  createAt: Date
}

scalar Date

type FundRecord {
  id: ID!
  accountName: String!
  gatewayAccount: String!
  coinType: String!
  assest: String!
  address: String!
  state: String!
  amount: Int!
  createAt: Date!
  updateAt: Date!
  jadeID: String!
  details: [Transaction]!
  isCybexFinished: Boolean!
  cybexTxID: String
  fundType: String!
}

type Mutation {
  newDepositAddress(accountName: String!, asset: String!): AccountAddressRecord!
}

type Query {
  allRecords(query: RecordQuery!): [FundRecord!]!
  verifyAddress(asset: String!, address: String!, accountName: String): WithdrawAddressInfo!
  withdrawInfo(type: String!): WithdrawInfo!
  getDepositAddress(accountName: String!, asset: String): AccountAddressRecord
}

input RecordQuery {
  accountName: String
  asset: String
  fundType: String
}

type Sig {
  r: String
  s: String
  v: String
}

type Transaction {
  id: String!
  state: String!
  coinType: String!
  bizType: String!
  to: String!
  value: String
  fee: Float
  extraData: String
  create_at: Date
  update_at: Date
  data: TransactionInfo
  meta: TransactionMeta
}

type TransactionAddress {
  address: String!
  value: String
  txid: String
  n: String
}

type TransactionInfo {
  type: String!
  hash: String
  state: String!
  from: [TransactionAddress]!
  to: [TransactionAddress]!
  fee: Float
  blockNumber: Int
  blockHash: String
  confirmations: Int
  timestampBegin: Date
  timestampFinish: Date
}

type TransactionMeta {
  sig: Sig
  status: Int
  crypto: String
}

type WithdrawAddressInfo {
  address: String!
  asset: String
  valid: Boolean!
}

type WithdrawInfo {
  minValue: Float!
  fee: Float!
  type: String!
  asset: String!
  precision: Int
  gatewayAccount: String!
}
